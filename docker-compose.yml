version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: arc-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: rust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rust"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for queues and caching
  redis:
    image: redis:7-alpine
    container_name: arc-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Web App
  web:
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
      target: development
    container_name: arc-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_ML_URL=http://localhost:8000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=dev-secret-change-in-production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rust
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["pnpm", "dev", "--filter", "web"]

  # NestJS API
  api:
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
      target: development
    container_name: arc-api
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rust
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - JWT_EXPIRES_IN=24h
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["pnpm", "dev", "--filter", "api"]

  # FastAPI ML Service
  ml:
    build:
      context: .
      dockerfile: ./docker/ml/Dockerfile
      target: development
    container_name: arc-ml
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/services/ml
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rust
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./services/ml:/app/services/ml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Node.js Ingest Worker
  ingest:
    build:
      context: .
      dockerfile: ./docker/ingest/Dockerfile
      target: development
    container_name: arc-ingest
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rust
      - REDIS_URL=redis://redis:6379
      - ML_SERVICE_URL=http://ml:8000
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - META_APP_ID=${META_APP_ID}
      - META_APP_SECRET=${META_APP_SECRET}
    volumes:
      - ./services/ingest:/app/services/ingest
      - ./packages:/app/packages
      - /app/node_modules
      - /app/services/ingest/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml:
        condition: service_started
    command: ["pnpm", "dev", "--filter", "ingest"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: arc-network


